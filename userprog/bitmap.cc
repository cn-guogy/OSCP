// bitmap.c
//	管理位图的例程 -- 一个每个位可以是开或关的位数组。
//	表示为一个整数数组。
//

#include "bitmap.h"

//----------------------------------------------------------------------
// BitMap::BitMap
// 	用 "nitems" 位初始化位图，使每个位都是清除的。
//	它可以被添加到列表中的某个地方。
//
//	"nitems" 是位图中的位数。
//----------------------------------------------------------------------

BitMap::BitMap(int nitems)
{
    numBits = nitems;
    numWords = divRoundUp(numBits, BitsInWord);
    map = new unsigned int[numWords];
    for (int i = 0; i < numBits; i++)
        Clear(i);
}

//----------------------------------------------------------------------
// BitMap::~BitMap
// 	释放位图。
//----------------------------------------------------------------------

BitMap::~BitMap()
{
    delete map;
}

//----------------------------------------------------------------------
// BitMap::Set
// 	设置位图中的 "第 n" 位。
//
//	"which" 是要设置的位的编号。
//----------------------------------------------------------------------

void BitMap::Mark(int which)
{
    ASSERT(which >= 0 && which < numBits);
    map[which / BitsInWord] |= 1 << (which % BitsInWord);
}

//----------------------------------------------------------------------
// BitMap::Clear
// 	清除位图中的 "第 n" 位。
//
//	"which" 是要清除的位的编号。
//----------------------------------------------------------------------

void BitMap::Clear(int which)
{
    ASSERT(which >= 0 && which < numBits);
    map[which / BitsInWord] &= ~(1 << (which % BitsInWord));
}

//----------------------------------------------------------------------
// BitMap::Test
// 	如果 "第 n" 位被设置，则返回 TRUE。
//
//	"which" 是要测试的位的编号。
//----------------------------------------------------------------------

bool BitMap::Test(int which)
{
    ASSERT(which >= 0 && which < numBits);

    if (map[which / BitsInWord] & (1 << (which % BitsInWord)))
        return TRUE;
    else
        return FALSE;
}

//----------------------------------------------------------------------
// BitMap::Find
// 	返回第一个清除的位的编号。
//	作为副作用，设置该位（标记为使用中）。
//	（换句话说，查找并分配一个位。）
//
//	如果没有清除的位，返回 -1。
//----------------------------------------------------------------------

int BitMap::Find()
{
    for (int i = 0; i < numBits; i++)
        if (!Test(i))
        {
            Mark(i);
            return i;
        }
    return -1;
}

//----------------------------------------------------------------------
// BitMap::NumClear
// 	返回位图中清除位的数量。
//	（换句话说，有多少个位是未分配的？）
//----------------------------------------------------------------------

int BitMap::NumClear()
{
    int count = 0;

    for (int i = 0; i < numBits; i++)
        if (!Test(i))
            count++;
    return count;
}

//----------------------------------------------------------------------
// BitMap::Print
// 	打印位图的内容，用于调试。
//
//	可以通过多种方式完成，但我们只打印位图中设置的
//	所有位的编号。
//----------------------------------------------------------------------

void BitMap::Print()
{
    printf("位图设置:\n");
    for (int i = 0; i < numBits; i++)
        if (Test(i))
            printf("%d, ", i);
    printf("\n");
}

// 这些在 FILESYS 任务之前不需要

//----------------------------------------------------------------------
// BitMap::FetchFromFile
// 	从 Nachos 文件初始化位图的内容。
//
//	"file" 是读取位图的地方
//----------------------------------------------------------------------

void BitMap::FetchFrom(OpenFile *file)
{
    file->ReadAt((char *)map, numWords * sizeof(unsigned), 0);
}

//----------------------------------------------------------------------
// BitMap::WriteBack
// 	将位图的内容存储到 Nachos 文件中。
//
//	"file" 是写入位图的地方
//----------------------------------------------------------------------

void BitMap::WriteBack(OpenFile *file)
{
    file->WriteAt((char *)map, numWords * sizeof(unsigned), 0);
}
